{
  "service": {
    "service": "filmdatabase",
    "serviceObject": {
      "name": "filmdatabase"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs10.x",
      "region": "ap-southeast-2",
      "environment": {
        "CINEMAWORLD_TABLE": {
          "Ref": "Cinemaworld"
        },
        "FILMWORLD_TABLE": {
          "Ref": "Filmworld"
        }
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListBucket",
            "dynamodb:DescribeTable",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem",
            "s3:PutObject",
            "s3:GetObject",
            "s3:DeleteObject"
          ],
          "Resource": [
            "arn:aws:dynamodb:ap-southeast-2:*:table/CinemaWorld",
            "arn:aws:dynamodb:ap-southeast-2:*:table/FilmWorld",
            "arn:aws:s3:::bulkmovies/*"
          ]
        }
      ],
      "stage": "dev",
      "variableSyntax": "\\${([^{}:]+?(?:\\(|:)(?:[^:{}][^{}]*?)?)}",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "CreateFilmLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/filmdatabase-dev-createFilm"
            }
          },
          "GetAllFilmsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/filmdatabase-dev-getAllFilms"
            }
          },
          "GetFilmsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/filmdatabase-dev-getFilms"
            }
          },
          "GetFilmLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/filmdatabase-dev-getFilm"
            }
          },
          "UpdateFilmLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/filmdatabase-dev-updateFilm"
            }
          },
          "DeleteFilmLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/filmdatabase-dev-deleteFilm"
            }
          },
          "CsvExportLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/filmdatabase-dev-csvExport"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "filmdatabase",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/filmdatabase-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/filmdatabase-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sqs:ReceiveMessage",
                          "sqs:DeleteMessage",
                          "sqs:GetQueueAttributes"
                        ],
                        "Resource": [
                          "arn:aws:sqs:ap-southeast-2:939450071149:CsvTransactionQueue"
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "filmdatabase",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "CreateFilmLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/filmdatabase/dev/1611715757536-2021-01-27T02:49:17.536Z/filmdatabase.zip"
              },
              "Handler": "handler.createFilm",
              "Runtime": "nodejs10.x",
              "FunctionName": "filmdatabase-dev-createFilm",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CINEMAWORLD_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"CINEMAWORLD_TABLE\"]"
                  },
                  "FILMWORLD_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"FILMWORLD_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateFilmLogGroup"
            ]
          },
          "GetAllFilmsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/filmdatabase/dev/1611715757536-2021-01-27T02:49:17.536Z/filmdatabase.zip"
              },
              "Handler": "handler.getAllFilms",
              "Runtime": "nodejs10.x",
              "FunctionName": "filmdatabase-dev-getAllFilms",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CINEMAWORLD_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"CINEMAWORLD_TABLE\"]"
                  },
                  "FILMWORLD_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"FILMWORLD_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllFilmsLogGroup"
            ]
          },
          "GetFilmsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/filmdatabase/dev/1611715757536-2021-01-27T02:49:17.536Z/filmdatabase.zip"
              },
              "Handler": "handler.getFilms",
              "Runtime": "nodejs10.x",
              "FunctionName": "filmdatabase-dev-getFilms",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CINEMAWORLD_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"CINEMAWORLD_TABLE\"]"
                  },
                  "FILMWORLD_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"FILMWORLD_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetFilmsLogGroup"
            ]
          },
          "GetFilmLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/filmdatabase/dev/1611715757536-2021-01-27T02:49:17.536Z/filmdatabase.zip"
              },
              "Handler": "handler.getFilm",
              "Runtime": "nodejs10.x",
              "FunctionName": "filmdatabase-dev-getFilm",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CINEMAWORLD_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"CINEMAWORLD_TABLE\"]"
                  },
                  "FILMWORLD_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"FILMWORLD_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetFilmLogGroup"
            ]
          },
          "UpdateFilmLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/filmdatabase/dev/1611715757536-2021-01-27T02:49:17.536Z/filmdatabase.zip"
              },
              "Handler": "handler.updateFilm",
              "Runtime": "nodejs10.x",
              "FunctionName": "filmdatabase-dev-updateFilm",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CINEMAWORLD_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"CINEMAWORLD_TABLE\"]"
                  },
                  "FILMWORLD_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"FILMWORLD_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateFilmLogGroup"
            ]
          },
          "DeleteFilmLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/filmdatabase/dev/1611715757536-2021-01-27T02:49:17.536Z/filmdatabase.zip"
              },
              "Handler": "handler.deleteFilm",
              "Runtime": "nodejs10.x",
              "FunctionName": "filmdatabase-dev-deleteFilm",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CINEMAWORLD_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"CINEMAWORLD_TABLE\"]"
                  },
                  "FILMWORLD_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"FILMWORLD_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteFilmLogGroup"
            ]
          },
          "CsvExportLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/filmdatabase/dev/1611715757536-2021-01-27T02:49:17.536Z/filmdatabase.zip"
              },
              "Handler": "handler.csvExport",
              "Runtime": "nodejs10.x",
              "FunctionName": "filmdatabase-dev-csvExport",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "CINEMAWORLD_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"CINEMAWORLD_TABLE\"]"
                  },
                  "FILMWORLD_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"FILMWORLD_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CsvExportLogGroup"
            ]
          },
          "CreateFilmLambdaVersionYlt3S3ZCW7d08NrmHFAiy9IRWaYCeOLOYvMlbLseqw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateFilmLambdaFunction"
              },
              "CodeSha256": "WDg82nPDijqxrtsO4Efhpy9iEjXo+Z3ymNVyP7/Zq0A="
            }
          },
          "GetFilmsLambdaVersion6ovfwL2lgg74tbyXC9LWVRoZTqLu5qw4Wo0zzFFjQ0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetFilmsLambdaFunction"
              },
              "CodeSha256": "WDg82nPDijqxrtsO4Efhpy9iEjXo+Z3ymNVyP7/Zq0A="
            }
          },
          "GetFilmLambdaVersion5eMJKWtvy2LmmIP1lLBwqZ3voHJFge0QvqEUJgDnE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetFilmLambdaFunction"
              },
              "CodeSha256": "WDg82nPDijqxrtsO4Efhpy9iEjXo+Z3ymNVyP7/Zq0A="
            }
          },
          "UpdateFilmLambdaVersionDOKJfl7JZdT423mjiumQPp3e49uQMe0IM6K4a8AKNE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateFilmLambdaFunction"
              },
              "CodeSha256": "WDg82nPDijqxrtsO4Efhpy9iEjXo+Z3ymNVyP7/Zq0A="
            }
          },
          "CsvExportLambdaVersion8SrsHmf2f4Aunpe1YVsctzVD6YICCYyCENXMKusJe4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CsvExportLambdaFunction"
              },
              "CodeSha256": "WDg82nPDijqxrtsO4Efhpy9iEjXo+Z3ymNVyP7/Zq0A="
            }
          },
          "DeleteFilmLambdaVersionvUDuEUYAzmbdyJt04x4K2mjaQoNDFgwBzlCsNkQ728": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteFilmLambdaFunction"
              },
              "CodeSha256": "WDg82nPDijqxrtsO4Efhpy9iEjXo+Z3ymNVyP7/Zq0A="
            }
          },
          "GetAllFilmsLambdaVersionrlhibHI1RZ8f76s73qcsYHuQLKR6o0buizj7x7sYK7w": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllFilmsLambdaFunction"
              },
              "CodeSha256": "WDg82nPDijqxrtsO4Efhpy9iEjXo+Z3ymNVyP7/Zq0A="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-filmdatabase",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceDatabaseVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "{database}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDatabaseVarMovie": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceDatabaseVar"
              },
              "PathPart": "movie",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDatabaseVarMovieIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceDatabaseVarMovie"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDatabaseVarMovies": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceDatabaseVar"
              },
              "PathPart": "movies",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDatabaseVarMoviesNumberVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceDatabaseVarMovies"
              },
              "PathPart": "{number}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodDatabaseVarMovieOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceDatabaseVarMovie"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodDatabaseVarMoviesOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'http://localhost:5500/'",
                      "method.response.header.Access-Control-Allow-Headers": "'Accept,Origin,DNT,User-Agent,Referer,Content-Type,X-Amz-Date,x-amz-date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"http://localhost:5500/\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceDatabaseVarMovies"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodDatabaseVarMoviePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDatabaseVarMovie"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "AWS_IAM",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateFilmLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodDatabaseVarMoviesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDatabaseVarMovies"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAllFilmsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodDatabaseVarMoviesNumberVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDatabaseVarMoviesNumberVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetFilmsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodDatabaseVarMovieIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDatabaseVarMovieIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetFilmLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodDatabaseVarMovieIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDatabaseVarMovieIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateFilmLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodDatabaseVarMovieIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDatabaseVarMovieIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteFilmLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1611715751640": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodDatabaseVarMovieOptions",
              "ApiGatewayMethodDatabaseVarMoviesOptions",
              "ApiGatewayMethodDatabaseVarMoviePost",
              "ApiGatewayMethodDatabaseVarMoviesGet",
              "ApiGatewayMethodDatabaseVarMoviesNumberVarGet",
              "ApiGatewayMethodDatabaseVarMovieIdVarGet",
              "ApiGatewayMethodDatabaseVarMovieIdVarPut",
              "ApiGatewayMethodDatabaseVarMovieIdVarDelete"
            ]
          },
          "CreateFilmLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateFilmLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetAllFilmsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllFilmsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetFilmsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetFilmsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetFilmLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetFilmLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateFilmLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateFilmLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteFilmLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteFilmLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CsvExportEventSourceMappingSQSCsvTransactionQueue": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": [
              "IamRoleLambdaExecution"
            ],
            "Properties": {
              "BatchSize": 10,
              "EventSourceArn": "arn:aws:sqs:ap-southeast-2:939450071149:CsvTransactionQueue",
              "FunctionName": {
                "Fn::GetAtt": [
                  "CsvExportLambdaFunction",
                  "Arn"
                ]
              },
              "Enabled": true
            }
          },
          "Cinemaworld": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "CinemaWorld"
            }
          },
          "Filmworld": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "FilmWorld"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "CreateFilmLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateFilmLambdaVersionYlt3S3ZCW7d08NrmHFAiy9IRWaYCeOLOYvMlbLseqw"
            }
          },
          "GetFilmsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetFilmsLambdaVersion6ovfwL2lgg74tbyXC9LWVRoZTqLu5qw4Wo0zzFFjQ0"
            }
          },
          "GetFilmLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetFilmLambdaVersion5eMJKWtvy2LmmIP1lLBwqZ3voHJFge0QvqEUJgDnE"
            }
          },
          "UpdateFilmLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateFilmLambdaVersionDOKJfl7JZdT423mjiumQPp3e49uQMe0IM6K4a8AKNE"
            }
          },
          "CsvExportLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CsvExportLambdaVersion8SrsHmf2f4Aunpe1YVsctzVD6YICCYyCENXMKusJe4"
            }
          },
          "DeleteFilmLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteFilmLambdaVersionvUDuEUYAzmbdyJt04x4K2mjaQoNDFgwBzlCsNkQ728"
            }
          },
          "GetAllFilmsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllFilmsLambdaVersionrlhibHI1RZ8f76s73qcsYHuQLKR6o0buizj7x7sYK7w"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "settings": {
        "CINEMAWORLD_TABLE": "CinemaWorld",
        "FILMWORLD_TABLE": "FilmWorld"
      }
    },
    "pluginsData": {},
    "functions": {
      "createFilm": {
        "handler": "handler.createFilm",
        "events": [
          {
            "http": {
              "path": "{database}/movie",
              "method": "post",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "AWS_IAM",
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "filmdatabase-dev-createFilm",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs10.x",
        "vpc": {},
        "versionLogicalId": "CreateFilmLambdaVersionYlt3S3ZCW7d08NrmHFAiy9IRWaYCeOLOYvMlbLseqw"
      },
      "getAllFilms": {
        "handler": "handler.getAllFilms",
        "events": [
          {
            "http": {
              "path": "{database}/movies",
              "method": "get",
              "cors": {
                "origins": [
                  "http://localhost:5500/"
                ],
                "headers": [
                  "Accept",
                  "Origin",
                  "DNT",
                  "User-Agent",
                  "Referer",
                  "Content-Type",
                  "X-Amz-Date",
                  "x-amz-date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token"
                ],
                "allowCredentials": false,
                "methods": [
                  "OPTIONS",
                  "GET"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "filmdatabase-dev-getAllFilms",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs10.x",
        "vpc": {},
        "versionLogicalId": "GetAllFilmsLambdaVersionrlhibHI1RZ8f76s73qcsYHuQLKR6o0buizj7x7sYK7w"
      },
      "getFilms": {
        "handler": "handler.getFilms",
        "events": [
          {
            "http": {
              "path": "{database}/movies/{number}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "filmdatabase-dev-getFilms",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs10.x",
        "vpc": {},
        "versionLogicalId": "GetFilmsLambdaVersion6ovfwL2lgg74tbyXC9LWVRoZTqLu5qw4Wo0zzFFjQ0"
      },
      "getFilm": {
        "handler": "handler.getFilm",
        "events": [
          {
            "http": {
              "path": "{database}/movie/{id}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "filmdatabase-dev-getFilm",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs10.x",
        "vpc": {},
        "versionLogicalId": "GetFilmLambdaVersion5eMJKWtvy2LmmIP1lLBwqZ3voHJFge0QvqEUJgDnE"
      },
      "updateFilm": {
        "handler": "handler.updateFilm",
        "events": [
          {
            "http": {
              "path": "{database}/movie/{id}",
              "method": "put",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "filmdatabase-dev-updateFilm",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs10.x",
        "vpc": {},
        "versionLogicalId": "UpdateFilmLambdaVersionDOKJfl7JZdT423mjiumQPp3e49uQMe0IM6K4a8AKNE"
      },
      "deleteFilm": {
        "handler": "handler.deleteFilm",
        "events": [
          {
            "http": {
              "path": "{database}/movie/{id}",
              "method": "delete",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "filmdatabase-dev-deleteFilm",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs10.x",
        "vpc": {},
        "versionLogicalId": "DeleteFilmLambdaVersionvUDuEUYAzmbdyJt04x4K2mjaQoNDFgwBzlCsNkQ728"
      },
      "csvExport": {
        "handler": "handler.csvExport",
        "events": [
          {
            "sqs": "arn:aws:sqs:ap-southeast-2:939450071149:CsvTransactionQueue"
          }
        ],
        "name": "filmdatabase-dev-csvExport",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs10.x",
        "vpc": {},
        "versionLogicalId": "CsvExportLambdaVersion8SrsHmf2f4Aunpe1YVsctzVD6YICCYyCENXMKusJe4"
      }
    },
    "resources": {
      "Resources": {
        "Cinemaworld": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "TableName": "CinemaWorld"
          }
        },
        "Filmworld": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "TableName": "FilmWorld"
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "layers": {},
    "initialServerlessConfig": {
      "service": {
        "$ref": "$[\"service\"][\"serviceObject\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "/home/apochilles-laptop/development/Back-end-technical/movie_database_back-end/.serverless/filmdatabase.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/filmdatabase/dev/1611715757536-2021-01-27T02:49:17.536Z",
    "artifact": "filmdatabase.zip"
  }
}